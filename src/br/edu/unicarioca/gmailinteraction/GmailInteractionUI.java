/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.edu.unicarioca.gmailinteraction;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Guilherme
 */
public class GmailInteractionUI extends javax.swing.JFrame {

    /**
     * Creates new form GmailInteractionUI
     */
    private static final String MESSAGE_SHOWING_OFFLINE = "Showing offline.";
    
    DefaultTableModel model;
    ArrayList<MailData> mailDataList = null;

    public GmailInteractionUI() {
        initComponents();
        EmailDB.getInstance().setup();
        model = (DefaultTableModel) tableMailList.getModel();
        showOfflineMail();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        mailListScrollPanel = new javax.swing.JScrollPane();
        tableMailList = new javax.swing.JTable();
        buttonsPanel = new javax.swing.JPanel();
        buttonRefresh = new javax.swing.JButton();
        buttonShowOffline = new javax.swing.JButton();
        labelsPanel = new javax.swing.JPanel();
        labelLastUpdate = new javax.swing.JLabel();
        labelLastUpdateInfo = new javax.swing.JLabel();
        textBoxPanel = new javax.swing.JPanel();
        boxEmail = new javax.swing.JTextField();
        labelEmail = new javax.swing.JLabel();
        labelPassword = new javax.swing.JLabel();
        boxPassword = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tableMailList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "From", "Subject", "Content"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        mailListScrollPanel.setViewportView(tableMailList);

        buttonRefresh.setText("Refresh");
        buttonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRefreshActionPerformed(evt);
            }
        });

        buttonShowOffline.setText("Mostar offline");
        buttonShowOffline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonShowOfflineActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonsPanelLayout = new javax.swing.GroupLayout(buttonsPanel);
        buttonsPanel.setLayout(buttonsPanelLayout);
        buttonsPanelLayout.setHorizontalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonShowOffline)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonRefresh)
                .addContainerGap())
        );
        buttonsPanelLayout.setVerticalGroup(
            buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonRefresh)
                    .addComponent(buttonShowOffline))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        labelsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        labelLastUpdate.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        labelLastUpdate.setText("Time of last online update:");

        labelLastUpdateInfo.setText("text_holder");

        javax.swing.GroupLayout labelsPanelLayout = new javax.swing.GroupLayout(labelsPanel);
        labelsPanel.setLayout(labelsPanelLayout);
        labelsPanelLayout.setHorizontalGroup(
            labelsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(labelsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelLastUpdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelLastUpdateInfo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        labelsPanelLayout.setVerticalGroup(
            labelsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(labelsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(labelsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelLastUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelLastUpdateInfo))
                .addContainerGap())
        );

        textBoxPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        labelEmail.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelEmail.setText("Email:");

        labelPassword.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelPassword.setText("Password:");

        javax.swing.GroupLayout textBoxPanelLayout = new javax.swing.GroupLayout(textBoxPanel);
        textBoxPanel.setLayout(textBoxPanelLayout);
        textBoxPanelLayout.setHorizontalGroup(
            textBoxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(textBoxPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(textBoxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelEmail)
                    .addComponent(boxEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(textBoxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelPassword)
                    .addComponent(boxPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(295, Short.MAX_VALUE))
        );
        textBoxPanelLayout.setVerticalGroup(
            textBoxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, textBoxPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(textBoxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelEmail)
                    .addComponent(labelPassword))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(textBoxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(boxEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(boxPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(labelsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mailListScrollPanel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(textBoxPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textBoxPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mailListScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonShowOfflineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonShowOfflineActionPerformed
        showOfflineMail();
    }//GEN-LAST:event_buttonShowOfflineActionPerformed

    private void buttonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRefreshActionPerformed
        clearDBMailTable();
        clearUIMailTable();
        downloadMailDataList();
        fillUIMailTable(mailDataList);
        saveOffline();
        updateLastUpdateInfo(true);
    }//GEN-LAST:event_buttonRefreshActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GmailInteractionUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GmailInteractionUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GmailInteractionUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GmailInteractionUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GmailInteractionUI().setVisible(true);
            }
        });
    }

    private void showOfflineMail() {
        clearUIMailTable();
        mailDataList = EmailDB.getInstance().select();

        fillUIMailTable(mailDataList);

        updateLastUpdateInfo(false);
    }

    private void saveOffline() {
        Debug.log("Salvando email no banco...");
        
        if (mailDataList == null)
            return;
        
        EmailDB.getInstance().insert(mailDataList);
    }

    private void updateLastUpdateInfo(boolean online) {
        if (online) {
            Calendar calendar = Calendar.getInstance();
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy - HH:mm:ss");

            labelLastUpdateInfo.setText(sdf.format(calendar.getTime()));
        } else {
            labelLastUpdateInfo.setText(MESSAGE_SHOWING_OFFLINE);
        }
    }

    private void downloadMailDataList() {
        Debug.log("Baixando mensagens...");

        CheckingMails checkingEmails = new CheckingMails();
        String inputedEmail = boxEmail.getText();
        String inputedPasswors = boxEmail.getText();
        
        if((inputedEmail != null && inputedEmail.isEmpty() == false && inputedEmail.compareTo(" ") != 0) 
                && (inputedPasswors != null && inputedPasswors.isEmpty() == false && inputedPasswors.compareTo(" ") != 0)){
            Debug.log("Configurando dados de login inputados...");
            checkingEmails = new CheckingMails(inputedEmail, inputedPasswors);
        }

        mailDataList = checkingEmails.getMailData();
    }

    private void fillUIMailTable(ArrayList<MailData> mailDataList) {
        Debug.log("Atualizando tabela...");
        
        if (mailDataList == null) {
            Debug.log("Não existem mensagens salvas.");
            return;
        }

        MailData currentMailData;

        for (int i = 0; i < mailDataList.size(); i++) {
            currentMailData = mailDataList.get(i);
            model.insertRow(model.getRowCount(), new Object[]{currentMailData.getFrom(), currentMailData.getSubject(), currentMailData.getContent()});
        }
    }

    private boolean clearUIMailTable() {
        Debug.log("Limpando tabela de emails...");

        if (model.getRowCount() > 0) {
            model.setRowCount(0);
            return true;
        }

        return false;
    }

    private void clearDBMailTable() {
        EmailDB.getInstance().clear();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField boxEmail;
    private javax.swing.JPasswordField boxPassword;
    private javax.swing.JButton buttonRefresh;
    private javax.swing.JButton buttonShowOffline;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JLabel labelEmail;
    private javax.swing.JLabel labelLastUpdate;
    private javax.swing.JLabel labelLastUpdateInfo;
    private javax.swing.JLabel labelPassword;
    private javax.swing.JPanel labelsPanel;
    private javax.swing.JScrollPane mailListScrollPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTable tableMailList;
    private javax.swing.JPanel textBoxPanel;
    // End of variables declaration//GEN-END:variables
}
